#!/usr/bin/env php
<?php

if ( PHP_SAPI !== 'cli' ) {
	die( "This is not a valid entry point.\n" );
}

require( __DIR__ . '/src/RedisJobService.php' );

RedisJobService::checkEnvironment();

class RedisJobChronService extends RedisJobService {
	const LUA_WAIT_US = 5000; // time to wait between Lua scripts
	const PERIOD_WAIT_US = 1e6; // time between task runs

	/**
	 * Entry point method that starts the service in earnest and keeps running
     * @throws Exception
	 */
	public function main() {
		$this->notice( "Starting job chron loop(s)..." );

		$host = gethostname();

		// Setup signal handlers...
		$handlerFunc = function( $signo ) {
			print "Caught signal ($signo)\n";
			exit( 0 );
		};
		$ok = pcntl_signal( SIGHUP, $handlerFunc )
			&& pcntl_signal( SIGINT, $handlerFunc )
			&& pcntl_signal( SIGTERM, $handlerFunc );
		if ( !$ok ) {
			throw new Exception( 'Could not install signal handlers.' );
		}

		usleep( mt_rand( 0, self::PERIOD_WAIT_US ) ); // run out of phase immediately

		$memLast = memory_get_usage();
		$this->incrStats( "start-chron.$host" );
		while ( true ) {
			pcntl_signal_dispatch();

			$count = $this->executePeriodicTasks();
			if ( $count ) {
				$this->notice( "Updated the state of $count job(s) (recycle/undelay/abandon)." );
			}

			usleep( self::PERIOD_WAIT_US );

			// Track memory usage
			$memCurrent = memory_get_usage();
			$this->debug( "Memory usage: $memCurrent bytes." );
			$this->incrStats( "memory.$host", $memCurrent - $memLast );
			$this->sendStats();
			$memLast = $memCurrent;
		}
	}

	/**
	 * Recycle or destroy any jobs that have been claimed for too long and release any ready
	 * delayed jobs into the queue. Also abandon and prune out jobs that failed too many times.
	 * Finally, this updates the aggregator server as necessary.
	 *
	 * @return int|bool Number of jobs recycled/deleted/undelayed/abandoned (false if not run)
	 */
	private function executePeriodicTasks() {
		$jobs = 0;

		$host = gethostname();

		$ok = true;
		try {
			// Only let a limited number of services do this at once
			$lockKey = $this->poolLock( __METHOD__, count( $this->queueSrvs ), 300 );
			if ( $lockKey === false ) {
				$this->incrStats( "periodictasks.raced.$host" );
				$this->notice( "Raced out of periodic tasks." );
				return $jobs;
			}

			$this->incrStats( "periodictasks.claimed.$host" );

			// Job queue partition servers
			$qServers = $this->queueSrvs;
			// Randomize to scale the liveliness with the # of runners
			shuffle( $qServers );

			// Track queues that become "ready"
			$aggrMap = [ '_epoch' => time() ]; // map of (queue name => timestamp)
			// Run the chron script on each job queue partition server...
			foreach ( $qServers as $qServer ) {
				if ( !$this->updatePartitionQueueServer( $qServer, $aggrMap, $jobs, $lockKey ) ) {
					$this->incrStats( "periodictasks.partition-failed.$qServer" );
					$ok = false;
				}
			}
			// Update the map in the aggregator as queues become ready or empty.
			// Brief race conditions get fixed within seconds by the next runs.
			$this->redisCmdHA(
				$this->aggrSrvs,
				'hMSet',
				[ "{$this->getReadyQueueKey()}:temp", $aggrMap ]
			);
			$this->redisCmdHA(
				$this->aggrSrvs,
				'rename',
				[ "{$this->getReadyQueueKey()}:temp", $this->getReadyQueueKey() ]
			);

			// Release the pool lock
			$this->poolUnlock( $lockKey );
		} catch ( RedisExceptionHA $e ) {
			$ok = false;
		}

		if ( $ok ) {
			$this->incrStats( "periodictasks.done.$host" );
		} else {
			$this->incrStats( "periodictasks.failed.$host" );
			$this->error( "Failed to do periodic tasks for some queues." );
		}

		return $jobs;
	}

	/**
	 * @param string $qServer Redis host
	 * @param array $aggrMap Map of (queue name => timestamp)
	 * @param integer $jobs
	 * @param string $lockKey
	 * @return bool
     * @throws RedisExceptionHA
	 */
	private function updatePartitionQueueServer( string $qServer, array &$aggrMap, int &$jobs, string $lockKey ) : bool {
		$qConn = $this->getRedisConn( $qServer );
		if ( !$qConn ) {
			return false; // partition down
		}

		// Get the list of queues with non-abandoned jobs
		try {
			$queueIds = $this->redisCmd(
				$qConn,
				'sMembers',
				[ 'global:jobqueue:s-queuesWithJobs' ]
			);
		} catch ( RedisException $e ) {
			$this->handleRedisError( $e, $qServer );
			return false;
		}

		// Build up per-queue script arguments using an Iterator to avoid client OOMs...
		shuffle( $queueIds ); // equal priority
		$paramsByQueue = new PeriodicScriptParamsIterator( $this, $queueIds );

		$ok = true;
		$queuesChecked = 0;
		$scriptLoaded = false; // load LUA script only once per server round
		foreach ( $paramsByQueue as $params ) {
			// Run periodic updates on this partition of this queue
			$affected = $this->updatePartitionQueue( $qServer, $params, $aggrMap, $scriptLoaded );
			$ok = $ok && ( $affected !== false );

			usleep( self::LUA_WAIT_US ); // avoid CPU hogging

			$jobs += (int)$affected;

			// Don't let the pool lock expire mid-run
			if ( ( ++$queuesChecked % 100 ) == 0 ) {
				$this->poolRefreshLock( $lockKey );
			}
		}

		return $ok;
	}

	/**
	 * @param string $qServer Redis host
	 * @param array $params A single value from PeriodicScriptParamsIterator
	 * @param array $aggrMap Map of (queue name => timestamp)
	 * @param bool $scriptLoaded
	 * @return int|bool Affected jobs or false on failure
	 */
	private function updatePartitionQueue( string $qServer, array $params, array &$aggrMap, bool &$scriptLoaded ) {
		$qConn = $this->getRedisConn( $qServer );
		if ( !$qConn ) {
			return false; // partition down
		}

		try {
			// Load the LUA script into memory if needed
			$script = PeriodicScriptParamsIterator::getChronScript();
			if ( $scriptLoaded ) {
				$sha1 = sha1( $script );
			} else {
				$sha1 = $this->redisCmd( $qConn, 'script', [ 'load', $script ] );
				$scriptLoaded = true;
			}

			$result = $this->redisCmd(
				$qConn,
				'evalSha',
				[ $sha1, $params['params'], $params['keys'] ]
			);

			if ( $result ) {
				list( $qType, $qDomain ) = $params['queue'];
				list( $released, $abandoned, $pruned, $undelayed, $ready ) = $result;
				if ( $ready > 0 ) {
					// This checks $ready to handle lost aggregator updates as well as
					// to merge after network partitions that caused aggregator fail-over.
					$aggrMap[$this->encQueueName( $qType, $qDomain )] = time();
				}
				$affectedJobs = ( array_sum( $result ) - $ready );
				$this->incrStats( "job-recycle.$qType", $released );
				$this->incrStats( "job-abandon.$qType", $abandoned );
				$this->incrStats( "job-undelay.$qType", $undelayed );
				$this->incrStats( "job-prune.$qType", $pruned );
			} else {
				$affectedJobs = false;
			}
		} catch ( RedisException $e ) {
			$affectedJobs = false;
			$this->handleRedisError( $e, $qServer );
		}

		return $affectedJobs;
	}

	/**
	 * @param string $name
	 * @param integer $slots
	 * @param integer $ttl
	 * @return string|bool Lock key or false
     * @throws RedisExceptionHA
	 */
	private function poolLock( string $name, int $slots, int $ttl ) {
		for ( $i=0; $i < $slots; ++$i ) {
			$key = "$name:lock:$i";
			$now = microtime( true );

			$oldLock = $this->redisCmdHA( $this->aggrSrvs, 'get', [ $key ] );
			if ( $oldLock === false || $oldLock < ( $now - $ttl ) ) {
				$casLock = $this->redisCmdHA( $this->aggrSrvs, 'getset', [ $key, $now ] );
				if ( $casLock == $oldLock ) {
					return $key;
				}
			}
		}

		return false;
	}

	/**
	 * @param string $key
	 * @return bool
     * @throws RedisExceptionHA
	 */
	private function poolRefreshLock( string $key ) : bool {
		return $this->redisCmdHA( $this->aggrSrvs, 'set', [ $key, microtime( true ) ] );
	}

	/**
	 * @param string $key
	 * @return bool
     * @throws RedisExceptionHA
	 */
	private function poolUnlock( string $key ) : bool {
		return (bool)$this->redisCmdHA( $this->aggrSrvs, 'del', [ $key ] );
	}

	/**
	 * @param string $type Queue type
	 * @return integer Seconds
	 */
	public function getTTLForType( string $type ) : int {
		return isset( $this->claimTTLMap[$type] )
			? $this->claimTTLMap[$type]
			: $this->claimTTLMap['*'];
	}

	/**
	 * @param string $type Queue type
	 * @return integer
	 */
	public function getAttemptsForType( string $type ) : int {
		return isset( $this->attemptsMap[$type] )
			? $this->attemptsMap[$type]
			: $this->attemptsMap['*'];
	}
}

class PeriodicScriptParamsIterator implements Iterator {
	/** @var RedisJobChronService */
	private $service;
	/** @var string[] JSON encoded queue name list */
	private $queueIds;

	const LUA_MAX_JOBS = 500; // limit on the number of jobs to change state in a Lua script

	/**
	 * @param RedisJobChronService $service
	 * @param array $queueIds JSON encoded queue name list (type, domain)
	 */
	public function __construct( RedisJobChronService $service, array $queueIds ) {
		$this->service = $service;
		$this->queueIds = $queueIds;
	}

	function rewind() {
		reset( $this->queueIds );
	}

	function current() {
		$queueId = current( $this->queueIds );
		if ( $queueId === false ) {
			return false;
		}

		list( $type, $domain ) = json_decode( $queueId );
		$now = time();

		return [
			'queue' => [ $type, $domain ],
			'params' => [
				"{$domain}:jobqueue:{$type}:z-claimed", # KEYS[1]
				"{$domain}:jobqueue:{$type}:h-attempts", # KEYS[2]
				"{$domain}:jobqueue:{$type}:l-unclaimed", # KEYS[3]
				"{$domain}:jobqueue:{$type}:h-data", # KEYS[4]
				"{$domain}:jobqueue:{$type}:z-abandoned", # KEYS[5]
				"{$domain}:jobqueue:{$type}:z-delayed", # KEYS[6]
				"global:jobqueue:s-queuesWithJobs", # KEYS[7]
				$now - $this->service->getTTLForType( $type ), # ARGV[1]
				$now - 7 * 86400, # ARGV[2]
				$this->service->getAttemptsForType( $type ), # ARGV[3]
				$now, # ARGV[4]
				$queueId, # ARGV[5]
				self::LUA_MAX_JOBS # ARGV[6]
			],
			'keys' => 7 # number of first argument(s) that are keys
		];
	}

	function key() {
		return key( $this->queueIds );
	}

	function next() {
		next( $this->queueIds );
	}

	function valid() : int {
		return key( $this->queueIds ) !== null;
	}

	/**
	 * @return string
	 */
	public static function getChronScript() : string {
		return <<<LUA
		local kClaimed, kAttempts, kUnclaimed, kData, kAbandoned, kDelayed, kQwJobs = unpack(KEYS)
		local rClaimCutoff, rPruneCutoff, rAttempts, rTime, queueId, rLimit = unpack(ARGV)
		local released,abandoned,pruned,undelayed,ready = 0,0,0,0,0
		-- Short-circuit if there is nothing at all in the queue
		if redis.call('exists',kData) == 0 then
			redis.call('sRem',kQwJobs,queueId)
			return {released,abandoned,pruned,undelayed,ready}
		end
		-- Get all non-dead jobs that have an expired claim on them.
		-- The score for each item is the last claim timestamp (UNIX).
		local staleClaims = redis.call('zRangeByScore',kClaimed,0,rClaimCutoff,'limit',0,rLimit)
		for k,id in ipairs(staleClaims) do
			local timestamp = redis.call('zScore',kClaimed,id)
			local attempts = 1*redis.call('hGet',kAttempts,id)
			if attempts < 1*rAttempts then
				-- Claim expired and attempts left: re-enqueue the job
				redis.call('rPush',kUnclaimed,id)
				released = released + 1
			else
				-- Claim expired and no attempts left: mark the job as dead
				redis.call('zAdd',kAbandoned,timestamp,id)
				abandoned = abandoned + 1
			end
			redis.call('zRem',kClaimed,id)
		end
		-- Get all of the dead jobs that have been marked as dead for too long.
		-- The score for each item is the last claim timestamp (UNIX).
		local deadClaims = redis.call('zRangeByScore',kAbandoned,0,rPruneCutoff,'limit',0,rLimit)
		for k,id in ipairs(deadClaims) do
			-- Stale and out of attempts: remove any traces of the job
			redis.call('zRem',kAbandoned,id)
			redis.call('hDel',kAttempts,id)
			redis.call('hDel',kData,id)
			pruned = pruned + 1
		end
		-- Get the list of ready delayed jobs, sorted by readiness (UNIX timestamp)
		local ids = redis.call('zRangeByScore',kDelayed,0,rTime,'limit',0,rLimit)
		-- Migrate the jobs from the "delayed" set to the "unclaimed" list
		for k,id in ipairs(ids) do
			redis.call('lPush',kUnclaimed,id)
			redis.call('zRem',kDelayed,id)
		end
		undelayed = #ids
		ready = redis.call('lLen',kUnclaimed)
		-- Keep track of whether this queue has jobs
		local aliveCount = ready + redis.call('zCard',kClaimed) + redis.call('zCard',kDelayed)
		if aliveCount > 0 then
			redis.call('sAdd',kQwJobs,queueId)
		else
			redis.call('sRem',kQwJobs,queueId)
		end
		return {released,abandoned,pruned,undelayed,ready}
LUA;
	}
}

error_reporting( E_ALL | E_STRICT );
ini_set( 'display_errors', 1 );

// Run the server...
set_time_limit( 0 );
ini_set( 'memory_limit', '256M' );
RedisJobChronService::init(
	getopt( '', [ 'config-file::', 'help', 'verbose' ] )
)->main();
